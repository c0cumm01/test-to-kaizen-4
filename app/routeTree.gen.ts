/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
import { createFileRoute } from "@tanstack/react-router";

// Import Routes
import { Route as rootRoute } from "./routes/__root";
import { Route as AuthLayoutDefaultSystemObservationLayoutImport } from "./routes/_auth/_layout-default.system-observation._layout";
import { Route as AuthLayoutDefaultSystemObservationLayoutHistoricalImport } from "./routes/_auth/_layout-default.system-observation._layout.historical";
import { Route as AuthLayoutDefaultSystemObservationLayoutIndexImport } from "./routes/_auth/_layout-default.system-observation._layout.index";
import { Route as AuthLayoutDefaultTicketsTicketIdEditImport } from "./routes/_auth/_layout-default.tickets.$ticketId.edit";
import { Route as AuthLayoutDefaultTicketsTicketIdIndexImport } from "./routes/_auth/_layout-default.tickets.$ticketId.index";
import { Route as AuthLayoutDefaultTicketsIndexImport } from "./routes/_auth/_layout-default.tickets.index";
import { Route as AuthLayoutDefaultTicketsNewImport } from "./routes/_auth/_layout-default.tickets.new";
import { Route as coreAdminImport } from "./routes/(core)/_admin";
import { Route as coreAdminLayoutDefaultImport } from "./routes/(core)/_admin/_layout-default";
import { Route as coreAdminLayoutDefaultAdminUserIdUserSessionsImport } from "./routes/(core)/_admin/_layout-default.admin.$userId.user-sessions";
import { Route as coreAdminLayoutDefaultAdminIndexImport } from "./routes/(core)/_admin/_layout-default.admin.index";
import { Route as coreAdminLayoutDefaultAdminUsersImport } from "./routes/(core)/_admin/_layout-default.admin.users";
import { Route as coreAuthImport } from "./routes/(core)/_auth";
import { Route as coreAuthLayoutDefaultImport } from "./routes/(core)/_auth/_layout-default";
import { Route as coreAuthLayoutDefaultCreateOrgImport } from "./routes/(core)/_auth/_layout-default.create-org";
import { Route as coreAuthLayoutDefaultIndexImport } from "./routes/(core)/_auth/_layout-default.index";
import { Route as coreAuthLayoutDefaultTestImport } from "./routes/(core)/_auth/_layout-default.test";
import { Route as coreAuthLayoutDefaultDevPagesImport } from "./routes/(core)/_auth/_layout-default/dev/pages";
import { Route as coreAuthLayoutSettingsImport } from "./routes/(core)/_auth/_layout-settings";
import { Route as coreAuthLayoutSettingsOrganizationIdInviteImport } from "./routes/(core)/_auth/_layout-settings.$organizationId.invite";
import { Route as coreAuthLayoutSettingsOrganizationIdMembersImport } from "./routes/(core)/_auth/_layout-settings.$organizationId.members";
import { Route as coreAuthLayoutSettingsOrganizationIdSettingsImport } from "./routes/(core)/_auth/_layout-settings.$organizationId.settings";
import { Route as coreAcceptInvitationInvitationImport } from "./routes/(core)/accept-invitation.$invitation";
import { Route as coreForgotPasswordImport } from "./routes/(core)/forgot-password";
import { Route as coreLoginImport } from "./routes/(core)/login";
import { Route as coreLogoutImport } from "./routes/(core)/logout";
import { Route as coreRegisterImport } from "./routes/(core)/register";
import { Route as coreResetPasswordImport } from "./routes/(core)/reset-password";

// Create Virtual Routes
const coreImport = createFileRoute("/(core)")();
const AuthLayoutDefaultSystemObservationImport = createFileRoute(
  "/_auth/_layout-default/system-observation",
)();
// Create/Update Routes
const coreRoute = coreImport.update({
  id: "/(core)",
  getParentRoute: () => rootRoute,
} as any);
const coreResetPasswordRoute = coreResetPasswordImport.update({
  id: "/reset-password",
  path: "/reset-password",
  getParentRoute: () => coreRoute,
} as any);
const coreRegisterRoute = coreRegisterImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => coreRoute,
} as any);
const coreLogoutRoute = coreLogoutImport.update({
  id: "/logout",
  path: "/logout",
  getParentRoute: () => coreRoute,
} as any);
const coreLoginRoute = coreLoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => coreRoute,
} as any);
const coreForgotPasswordRoute = coreForgotPasswordImport.update({
  id: "/forgot-password",
  path: "/forgot-password",
  getParentRoute: () => coreRoute,
} as any);
const coreAuthRoute = coreAuthImport.update({
  id: "/_auth",
  getParentRoute: () => coreRoute,
} as any);
const coreAdminRoute = coreAdminImport.update({
  id: "/_admin",
  getParentRoute: () => coreRoute,
} as any);
const AuthLayoutDefaultSystemObservationRoute =
  AuthLayoutDefaultSystemObservationImport.update({
    id: "/_auth/_layout-default/system-observation",
    path: "/system-observation",
    getParentRoute: () => rootRoute,
  } as any);
const coreAcceptInvitationInvitationRoute =
  coreAcceptInvitationInvitationImport.update({
    id: "/accept-invitation/$invitation",
    path: "/accept-invitation/$invitation",
    getParentRoute: () => coreRoute,
  } as any);
const coreAuthLayoutSettingsRoute = coreAuthLayoutSettingsImport.update({
  id: "/_layout-settings",
  getParentRoute: () => coreAuthRoute,
} as any);
const coreAuthLayoutDefaultRoute = coreAuthLayoutDefaultImport.update({
  id: "/_layout-default",
  getParentRoute: () => coreAuthRoute,
} as any);
const coreAdminLayoutDefaultRoute = coreAdminLayoutDefaultImport.update({
  id: "/_layout-default",
  getParentRoute: () => coreAdminRoute,
} as any);
const AuthLayoutDefaultTicketsIndexRoute =
  AuthLayoutDefaultTicketsIndexImport.update({
    id: "/_auth/_layout-default/tickets/",
    path: "/tickets/",
    getParentRoute: () => rootRoute,
  } as any);
const coreAuthLayoutDefaultIndexRoute = coreAuthLayoutDefaultIndexImport.update(
  {
    id: "/",
    path: "/",
    getParentRoute: () => coreAuthLayoutDefaultRoute,
  } as any,
);
const AuthLayoutDefaultTicketsNewRoute =
  AuthLayoutDefaultTicketsNewImport.update({
    id: "/_auth/_layout-default/tickets/new",
    path: "/tickets/new",
    getParentRoute: () => rootRoute,
  } as any);
const AuthLayoutDefaultSystemObservationLayoutRoute =
  AuthLayoutDefaultSystemObservationLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => AuthLayoutDefaultSystemObservationRoute,
  } as any);
const coreAuthLayoutDefaultTestRoute = coreAuthLayoutDefaultTestImport.update({
  id: "/test",
  path: "/test",
  getParentRoute: () => coreAuthLayoutDefaultRoute,
} as any);
const coreAuthLayoutDefaultCreateOrgRoute =
  coreAuthLayoutDefaultCreateOrgImport.update({
    id: "/create-org",
    path: "/create-org",
    getParentRoute: () => coreAuthLayoutDefaultRoute,
  } as any);
const AuthLayoutDefaultTicketsTicketIdIndexRoute =
  AuthLayoutDefaultTicketsTicketIdIndexImport.update({
    id: "/_auth/_layout-default/tickets/$ticketId/",
    path: "/tickets/$ticketId/",
    getParentRoute: () => rootRoute,
  } as any);
const AuthLayoutDefaultSystemObservationLayoutIndexRoute =
  AuthLayoutDefaultSystemObservationLayoutIndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => AuthLayoutDefaultSystemObservationLayoutRoute,
  } as any);
const coreAdminLayoutDefaultAdminIndexRoute =
  coreAdminLayoutDefaultAdminIndexImport.update({
    id: "/admin/",
    path: "/admin/",
    getParentRoute: () => coreAdminLayoutDefaultRoute,
  } as any);
const AuthLayoutDefaultTicketsTicketIdEditRoute =
  AuthLayoutDefaultTicketsTicketIdEditImport.update({
    id: "/_auth/_layout-default/tickets/$ticketId/edit",
    path: "/tickets/$ticketId/edit",
    getParentRoute: () => rootRoute,
  } as any);
const AuthLayoutDefaultSystemObservationLayoutHistoricalRoute =
  AuthLayoutDefaultSystemObservationLayoutHistoricalImport.update({
    id: "/historical",
    path: "/historical",
    getParentRoute: () => AuthLayoutDefaultSystemObservationLayoutRoute,
  } as any);
const coreAuthLayoutSettingsOrganizationIdSettingsRoute =
  coreAuthLayoutSettingsOrganizationIdSettingsImport.update({
    id: "/$organizationId/settings",
    path: "/$organizationId/settings",
    getParentRoute: () => coreAuthLayoutSettingsRoute,
  } as any);
const coreAuthLayoutSettingsOrganizationIdMembersRoute =
  coreAuthLayoutSettingsOrganizationIdMembersImport.update({
    id: "/$organizationId/members",
    path: "/$organizationId/members",
    getParentRoute: () => coreAuthLayoutSettingsRoute,
  } as any);
const coreAuthLayoutSettingsOrganizationIdInviteRoute =
  coreAuthLayoutSettingsOrganizationIdInviteImport.update({
    id: "/$organizationId/invite",
    path: "/$organizationId/invite",
    getParentRoute: () => coreAuthLayoutSettingsRoute,
  } as any);
const coreAuthLayoutDefaultDevPagesRoute =
  coreAuthLayoutDefaultDevPagesImport.update({
    id: "/dev/pages",
    path: "/dev/pages",
    getParentRoute: () => coreAuthLayoutDefaultRoute,
  } as any);
const coreAdminLayoutDefaultAdminUsersRoute =
  coreAdminLayoutDefaultAdminUsersImport.update({
    id: "/admin/users",
    path: "/admin/users",
    getParentRoute: () => coreAdminLayoutDefaultRoute,
  } as any);
const coreAdminLayoutDefaultAdminUserIdUserSessionsRoute =
  coreAdminLayoutDefaultAdminUserIdUserSessionsImport.update({
    id: "/admin/$userId/user-sessions",
    path: "/admin/$userId/user-sessions",
    getParentRoute: () => coreAdminLayoutDefaultRoute,
  } as any);
// Populate the FileRoutesByPath interface
declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(core)": {
      id: "/(core)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof coreImport;
      parentRoute: typeof rootRoute;
    };
    "/(core)/_admin": {
      id: "/(core)/_admin";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof coreAdminImport;
      parentRoute: typeof coreRoute;
    };
    "/(core)/_auth": {
      id: "/(core)/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof coreAuthImport;
      parentRoute: typeof coreImport;
    };
    "/(core)/forgot-password": {
      id: "/(core)/forgot-password";
      path: "/forgot-password";
      fullPath: "/forgot-password";
      preLoaderRoute: typeof coreForgotPasswordImport;
      parentRoute: typeof coreImport;
    };
    "/(core)/login": {
      id: "/(core)/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof coreLoginImport;
      parentRoute: typeof coreImport;
    };
    "/(core)/logout": {
      id: "/(core)/logout";
      path: "/logout";
      fullPath: "/logout";
      preLoaderRoute: typeof coreLogoutImport;
      parentRoute: typeof coreImport;
    };
    "/(core)/register": {
      id: "/(core)/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof coreRegisterImport;
      parentRoute: typeof coreImport;
    };
    "/(core)/reset-password": {
      id: "/(core)/reset-password";
      path: "/reset-password";
      fullPath: "/reset-password";
      preLoaderRoute: typeof coreResetPasswordImport;
      parentRoute: typeof coreImport;
    };
    "/(core)/_admin/_layout-default": {
      id: "/(core)/_admin/_layout-default";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof coreAdminLayoutDefaultImport;
      parentRoute: typeof coreAdminImport;
    };
    "/(core)/_auth/_layout-default": {
      id: "/(core)/_auth/_layout-default";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof coreAuthLayoutDefaultImport;
      parentRoute: typeof coreAuthImport;
    };
    "/(core)/_auth/_layout-settings": {
      id: "/(core)/_auth/_layout-settings";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof coreAuthLayoutSettingsImport;
      parentRoute: typeof coreAuthImport;
    };
    "/(core)/accept-invitation/$invitation": {
      id: "/(core)/accept-invitation/$invitation";
      path: "/accept-invitation/$invitation";
      fullPath: "/accept-invitation/$invitation";
      preLoaderRoute: typeof coreAcceptInvitationInvitationImport;
      parentRoute: typeof coreImport;
    };
    "/(core)/_auth/_layout-default/create-org": {
      id: "/(core)/_auth/_layout-default/create-org";
      path: "/create-org";
      fullPath: "/create-org";
      preLoaderRoute: typeof coreAuthLayoutDefaultCreateOrgImport;
      parentRoute: typeof coreAuthLayoutDefaultImport;
    };
    "/(core)/_auth/_layout-default/test": {
      id: "/(core)/_auth/_layout-default/test";
      path: "/test";
      fullPath: "/test";
      preLoaderRoute: typeof coreAuthLayoutDefaultTestImport;
      parentRoute: typeof coreAuthLayoutDefaultImport;
    };
    "/_auth/_layout-default/system-observation": {
      id: "/_auth/_layout-default/system-observation";
      path: "/system-observation";
      fullPath: "/system-observation";
      preLoaderRoute: typeof AuthLayoutDefaultSystemObservationImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/_layout-default/system-observation/_layout": {
      id: "/_auth/_layout-default/system-observation/_layout";
      path: "/system-observation";
      fullPath: "/system-observation";
      preLoaderRoute: typeof AuthLayoutDefaultSystemObservationLayoutImport;
      parentRoute: typeof AuthLayoutDefaultSystemObservationRoute;
    };
    "/_auth/_layout-default/tickets/new": {
      id: "/_auth/_layout-default/tickets/new";
      path: "/tickets/new";
      fullPath: "/tickets/new";
      preLoaderRoute: typeof AuthLayoutDefaultTicketsNewImport;
      parentRoute: typeof rootRoute;
    };
    "/(core)/_auth/_layout-default/": {
      id: "/(core)/_auth/_layout-default/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof coreAuthLayoutDefaultIndexImport;
      parentRoute: typeof coreAuthLayoutDefaultImport;
    };
    "/_auth/_layout-default/tickets/": {
      id: "/_auth/_layout-default/tickets/";
      path: "/tickets";
      fullPath: "/tickets";
      preLoaderRoute: typeof AuthLayoutDefaultTicketsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/(core)/_admin/_layout-default/admin/users": {
      id: "/(core)/_admin/_layout-default/admin/users";
      path: "/admin/users";
      fullPath: "/admin/users";
      preLoaderRoute: typeof coreAdminLayoutDefaultAdminUsersImport;
      parentRoute: typeof coreAdminLayoutDefaultImport;
    };
    "/(core)/_auth/_layout-default/dev/pages": {
      id: "/(core)/_auth/_layout-default/dev/pages";
      path: "/dev/pages";
      fullPath: "/dev/pages";
      preLoaderRoute: typeof coreAuthLayoutDefaultDevPagesImport;
      parentRoute: typeof coreAuthLayoutDefaultImport;
    };
    "/(core)/_auth/_layout-settings/$organizationId/invite": {
      id: "/(core)/_auth/_layout-settings/$organizationId/invite";
      path: "/$organizationId/invite";
      fullPath: "/$organizationId/invite";
      preLoaderRoute: typeof coreAuthLayoutSettingsOrganizationIdInviteImport;
      parentRoute: typeof coreAuthLayoutSettingsImport;
    };
    "/(core)/_auth/_layout-settings/$organizationId/members": {
      id: "/(core)/_auth/_layout-settings/$organizationId/members";
      path: "/$organizationId/members";
      fullPath: "/$organizationId/members";
      preLoaderRoute: typeof coreAuthLayoutSettingsOrganizationIdMembersImport;
      parentRoute: typeof coreAuthLayoutSettingsImport;
    };
    "/(core)/_auth/_layout-settings/$organizationId/settings": {
      id: "/(core)/_auth/_layout-settings/$organizationId/settings";
      path: "/$organizationId/settings";
      fullPath: "/$organizationId/settings";
      preLoaderRoute: typeof coreAuthLayoutSettingsOrganizationIdSettingsImport;
      parentRoute: typeof coreAuthLayoutSettingsImport;
    };
    "/_auth/_layout-default/system-observation/_layout/historical": {
      id: "/_auth/_layout-default/system-observation/_layout/historical";
      path: "/historical";
      fullPath: "/system-observation/historical";
      preLoaderRoute: typeof AuthLayoutDefaultSystemObservationLayoutHistoricalImport;
      parentRoute: typeof AuthLayoutDefaultSystemObservationLayoutImport;
    };
    "/_auth/_layout-default/tickets/$ticketId/edit": {
      id: "/_auth/_layout-default/tickets/$ticketId/edit";
      path: "/tickets/$ticketId/edit";
      fullPath: "/tickets/$ticketId/edit";
      preLoaderRoute: typeof AuthLayoutDefaultTicketsTicketIdEditImport;
      parentRoute: typeof rootRoute;
    };
    "/(core)/_admin/_layout-default/admin/": {
      id: "/(core)/_admin/_layout-default/admin/";
      path: "/admin";
      fullPath: "/admin";
      preLoaderRoute: typeof coreAdminLayoutDefaultAdminIndexImport;
      parentRoute: typeof coreAdminLayoutDefaultImport;
    };
    "/_auth/_layout-default/system-observation/_layout/": {
      id: "/_auth/_layout-default/system-observation/_layout/";
      path: "/";
      fullPath: "/system-observation/";
      preLoaderRoute: typeof AuthLayoutDefaultSystemObservationLayoutIndexImport;
      parentRoute: typeof AuthLayoutDefaultSystemObservationLayoutImport;
    };
    "/_auth/_layout-default/tickets/$ticketId/": {
      id: "/_auth/_layout-default/tickets/$ticketId/";
      path: "/tickets/$ticketId";
      fullPath: "/tickets/$ticketId";
      preLoaderRoute: typeof AuthLayoutDefaultTicketsTicketIdIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/(core)/_admin/_layout-default/admin/$userId/user-sessions": {
      id: "/(core)/_admin/_layout-default/admin/$userId/user-sessions";
      path: "/admin/$userId/user-sessions";
      fullPath: "/admin/$userId/user-sessions";
      preLoaderRoute: typeof coreAdminLayoutDefaultAdminUserIdUserSessionsImport;
      parentRoute: typeof coreAdminLayoutDefaultImport;
    };
  }
}
// Create and export the route tree
interface coreAdminLayoutDefaultRouteChildren {
  coreAdminLayoutDefaultAdminUsersRoute: typeof coreAdminLayoutDefaultAdminUsersRoute;
  coreAdminLayoutDefaultAdminIndexRoute: typeof coreAdminLayoutDefaultAdminIndexRoute;
  coreAdminLayoutDefaultAdminUserIdUserSessionsRoute: typeof coreAdminLayoutDefaultAdminUserIdUserSessionsRoute;
}
const coreAdminLayoutDefaultRouteChildren: coreAdminLayoutDefaultRouteChildren =
  {
    coreAdminLayoutDefaultAdminUsersRoute:
      coreAdminLayoutDefaultAdminUsersRoute,
    coreAdminLayoutDefaultAdminIndexRoute:
      coreAdminLayoutDefaultAdminIndexRoute,
    coreAdminLayoutDefaultAdminUserIdUserSessionsRoute:
      coreAdminLayoutDefaultAdminUserIdUserSessionsRoute,
  };
const coreAdminLayoutDefaultRouteWithChildren =
  coreAdminLayoutDefaultRoute._addFileChildren(
    coreAdminLayoutDefaultRouteChildren,
  );
interface coreAdminRouteChildren {
  coreAdminLayoutDefaultRoute: typeof coreAdminLayoutDefaultRouteWithChildren;
}
const coreAdminRouteChildren: coreAdminRouteChildren = {
  coreAdminLayoutDefaultRoute: coreAdminLayoutDefaultRouteWithChildren,
};
const coreAdminRouteWithChildren = coreAdminRoute._addFileChildren(
  coreAdminRouteChildren,
);
interface coreAuthLayoutDefaultRouteChildren {
  coreAuthLayoutDefaultCreateOrgRoute: typeof coreAuthLayoutDefaultCreateOrgRoute;
  coreAuthLayoutDefaultTestRoute: typeof coreAuthLayoutDefaultTestRoute;
  coreAuthLayoutDefaultIndexRoute: typeof coreAuthLayoutDefaultIndexRoute;
  coreAuthLayoutDefaultDevPagesRoute: typeof coreAuthLayoutDefaultDevPagesRoute;
}
const coreAuthLayoutDefaultRouteChildren: coreAuthLayoutDefaultRouteChildren = {
  coreAuthLayoutDefaultCreateOrgRoute: coreAuthLayoutDefaultCreateOrgRoute,
  coreAuthLayoutDefaultTestRoute: coreAuthLayoutDefaultTestRoute,
  coreAuthLayoutDefaultIndexRoute: coreAuthLayoutDefaultIndexRoute,
  coreAuthLayoutDefaultDevPagesRoute: coreAuthLayoutDefaultDevPagesRoute,
};
const coreAuthLayoutDefaultRouteWithChildren =
  coreAuthLayoutDefaultRoute._addFileChildren(
    coreAuthLayoutDefaultRouteChildren,
  );
interface coreAuthLayoutSettingsRouteChildren {
  coreAuthLayoutSettingsOrganizationIdInviteRoute: typeof coreAuthLayoutSettingsOrganizationIdInviteRoute;
  coreAuthLayoutSettingsOrganizationIdMembersRoute: typeof coreAuthLayoutSettingsOrganizationIdMembersRoute;
  coreAuthLayoutSettingsOrganizationIdSettingsRoute: typeof coreAuthLayoutSettingsOrganizationIdSettingsRoute;
}
const coreAuthLayoutSettingsRouteChildren: coreAuthLayoutSettingsRouteChildren =
  {
    coreAuthLayoutSettingsOrganizationIdInviteRoute:
      coreAuthLayoutSettingsOrganizationIdInviteRoute,
    coreAuthLayoutSettingsOrganizationIdMembersRoute:
      coreAuthLayoutSettingsOrganizationIdMembersRoute,
    coreAuthLayoutSettingsOrganizationIdSettingsRoute:
      coreAuthLayoutSettingsOrganizationIdSettingsRoute,
  };
const coreAuthLayoutSettingsRouteWithChildren =
  coreAuthLayoutSettingsRoute._addFileChildren(
    coreAuthLayoutSettingsRouteChildren,
  );
interface coreAuthRouteChildren {
  coreAuthLayoutDefaultRoute: typeof coreAuthLayoutDefaultRouteWithChildren;
  coreAuthLayoutSettingsRoute: typeof coreAuthLayoutSettingsRouteWithChildren;
}
const coreAuthRouteChildren: coreAuthRouteChildren = {
  coreAuthLayoutDefaultRoute: coreAuthLayoutDefaultRouteWithChildren,
  coreAuthLayoutSettingsRoute: coreAuthLayoutSettingsRouteWithChildren,
};
const coreAuthRouteWithChildren = coreAuthRoute._addFileChildren(
  coreAuthRouteChildren,
);
interface coreRouteChildren {
  coreAdminRoute: typeof coreAdminRouteWithChildren;
  coreAuthRoute: typeof coreAuthRouteWithChildren;
  coreForgotPasswordRoute: typeof coreForgotPasswordRoute;
  coreLoginRoute: typeof coreLoginRoute;
  coreLogoutRoute: typeof coreLogoutRoute;
  coreRegisterRoute: typeof coreRegisterRoute;
  coreResetPasswordRoute: typeof coreResetPasswordRoute;
  coreAcceptInvitationInvitationRoute: typeof coreAcceptInvitationInvitationRoute;
}
const coreRouteChildren: coreRouteChildren = {
  coreAdminRoute: coreAdminRouteWithChildren,
  coreAuthRoute: coreAuthRouteWithChildren,
  coreForgotPasswordRoute: coreForgotPasswordRoute,
  coreLoginRoute: coreLoginRoute,
  coreLogoutRoute: coreLogoutRoute,
  coreRegisterRoute: coreRegisterRoute,
  coreResetPasswordRoute: coreResetPasswordRoute,
  coreAcceptInvitationInvitationRoute: coreAcceptInvitationInvitationRoute,
};
const coreRouteWithChildren = coreRoute._addFileChildren(coreRouteChildren);
interface AuthLayoutDefaultSystemObservationLayoutRouteChildren {
  AuthLayoutDefaultSystemObservationLayoutHistoricalRoute: typeof AuthLayoutDefaultSystemObservationLayoutHistoricalRoute;
  AuthLayoutDefaultSystemObservationLayoutIndexRoute: typeof AuthLayoutDefaultSystemObservationLayoutIndexRoute;
}
const AuthLayoutDefaultSystemObservationLayoutRouteChildren: AuthLayoutDefaultSystemObservationLayoutRouteChildren =
  {
    AuthLayoutDefaultSystemObservationLayoutHistoricalRoute:
      AuthLayoutDefaultSystemObservationLayoutHistoricalRoute,
    AuthLayoutDefaultSystemObservationLayoutIndexRoute:
      AuthLayoutDefaultSystemObservationLayoutIndexRoute,
  };
const AuthLayoutDefaultSystemObservationLayoutRouteWithChildren =
  AuthLayoutDefaultSystemObservationLayoutRoute._addFileChildren(
    AuthLayoutDefaultSystemObservationLayoutRouteChildren,
  );
interface AuthLayoutDefaultSystemObservationRouteChildren {
  AuthLayoutDefaultSystemObservationLayoutRoute: typeof AuthLayoutDefaultSystemObservationLayoutRouteWithChildren;
}
const AuthLayoutDefaultSystemObservationRouteChildren: AuthLayoutDefaultSystemObservationRouteChildren =
  {
    AuthLayoutDefaultSystemObservationLayoutRoute:
      AuthLayoutDefaultSystemObservationLayoutRouteWithChildren,
  };
const AuthLayoutDefaultSystemObservationRouteWithChildren =
  AuthLayoutDefaultSystemObservationRoute._addFileChildren(
    AuthLayoutDefaultSystemObservationRouteChildren,
  );
export interface FileRoutesByFullPath {
  "/": typeof coreAuthLayoutDefaultIndexRoute;
  "": typeof coreAuthLayoutSettingsRouteWithChildren;
  "/forgot-password": typeof coreForgotPasswordRoute;
  "/login": typeof coreLoginRoute;
  "/logout": typeof coreLogoutRoute;
  "/register": typeof coreRegisterRoute;
  "/reset-password": typeof coreResetPasswordRoute;
  "/accept-invitation/$invitation": typeof coreAcceptInvitationInvitationRoute;
  "/create-org": typeof coreAuthLayoutDefaultCreateOrgRoute;
  "/test": typeof coreAuthLayoutDefaultTestRoute;
  "/system-observation": typeof AuthLayoutDefaultSystemObservationLayoutRouteWithChildren;
  "/tickets/new": typeof AuthLayoutDefaultTicketsNewRoute;
  "/tickets": typeof AuthLayoutDefaultTicketsIndexRoute;
  "/admin/users": typeof coreAdminLayoutDefaultAdminUsersRoute;
  "/dev/pages": typeof coreAuthLayoutDefaultDevPagesRoute;
  "/$organizationId/invite": typeof coreAuthLayoutSettingsOrganizationIdInviteRoute;
  "/$organizationId/members": typeof coreAuthLayoutSettingsOrganizationIdMembersRoute;
  "/$organizationId/settings": typeof coreAuthLayoutSettingsOrganizationIdSettingsRoute;
  "/system-observation/historical": typeof AuthLayoutDefaultSystemObservationLayoutHistoricalRoute;
  "/tickets/$ticketId/edit": typeof AuthLayoutDefaultTicketsTicketIdEditRoute;
  "/admin": typeof coreAdminLayoutDefaultAdminIndexRoute;
  "/system-observation/": typeof AuthLayoutDefaultSystemObservationLayoutIndexRoute;
  "/tickets/$ticketId": typeof AuthLayoutDefaultTicketsTicketIdIndexRoute;
  "/admin/$userId/user-sessions": typeof coreAdminLayoutDefaultAdminUserIdUserSessionsRoute;
}
export interface FileRoutesByTo {
  "/": typeof coreAuthLayoutDefaultIndexRoute;
  "": typeof coreAuthLayoutSettingsRouteWithChildren;
  "/forgot-password": typeof coreForgotPasswordRoute;
  "/login": typeof coreLoginRoute;
  "/logout": typeof coreLogoutRoute;
  "/register": typeof coreRegisterRoute;
  "/reset-password": typeof coreResetPasswordRoute;
  "/accept-invitation/$invitation": typeof coreAcceptInvitationInvitationRoute;
  "/create-org": typeof coreAuthLayoutDefaultCreateOrgRoute;
  "/test": typeof coreAuthLayoutDefaultTestRoute;
  "/system-observation": typeof AuthLayoutDefaultSystemObservationLayoutIndexRoute;
  "/tickets/new": typeof AuthLayoutDefaultTicketsNewRoute;
  "/tickets": typeof AuthLayoutDefaultTicketsIndexRoute;
  "/admin/users": typeof coreAdminLayoutDefaultAdminUsersRoute;
  "/dev/pages": typeof coreAuthLayoutDefaultDevPagesRoute;
  "/$organizationId/invite": typeof coreAuthLayoutSettingsOrganizationIdInviteRoute;
  "/$organizationId/members": typeof coreAuthLayoutSettingsOrganizationIdMembersRoute;
  "/$organizationId/settings": typeof coreAuthLayoutSettingsOrganizationIdSettingsRoute;
  "/system-observation/historical": typeof AuthLayoutDefaultSystemObservationLayoutHistoricalRoute;
  "/tickets/$ticketId/edit": typeof AuthLayoutDefaultTicketsTicketIdEditRoute;
  "/admin": typeof coreAdminLayoutDefaultAdminIndexRoute;
  "/tickets/$ticketId": typeof AuthLayoutDefaultTicketsTicketIdIndexRoute;
  "/admin/$userId/user-sessions": typeof coreAdminLayoutDefaultAdminUserIdUserSessionsRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/(core)": typeof coreRouteWithChildren;
  "/(core)/_admin": typeof coreAdminRouteWithChildren;
  "/(core)/_auth": typeof coreAuthRouteWithChildren;
  "/(core)/forgot-password": typeof coreForgotPasswordRoute;
  "/(core)/login": typeof coreLoginRoute;
  "/(core)/logout": typeof coreLogoutRoute;
  "/(core)/register": typeof coreRegisterRoute;
  "/(core)/reset-password": typeof coreResetPasswordRoute;
  "/(core)/_admin/_layout-default": typeof coreAdminLayoutDefaultRouteWithChildren;
  "/(core)/_auth/_layout-default": typeof coreAuthLayoutDefaultRouteWithChildren;
  "/(core)/_auth/_layout-settings": typeof coreAuthLayoutSettingsRouteWithChildren;
  "/(core)/accept-invitation/$invitation": typeof coreAcceptInvitationInvitationRoute;
  "/(core)/_auth/_layout-default/create-org": typeof coreAuthLayoutDefaultCreateOrgRoute;
  "/(core)/_auth/_layout-default/test": typeof coreAuthLayoutDefaultTestRoute;
  "/_auth/_layout-default/system-observation": typeof AuthLayoutDefaultSystemObservationRouteWithChildren;
  "/_auth/_layout-default/system-observation/_layout": typeof AuthLayoutDefaultSystemObservationLayoutRouteWithChildren;
  "/_auth/_layout-default/tickets/new": typeof AuthLayoutDefaultTicketsNewRoute;
  "/(core)/_auth/_layout-default/": typeof coreAuthLayoutDefaultIndexRoute;
  "/_auth/_layout-default/tickets/": typeof AuthLayoutDefaultTicketsIndexRoute;
  "/(core)/_admin/_layout-default/admin/users": typeof coreAdminLayoutDefaultAdminUsersRoute;
  "/(core)/_auth/_layout-default/dev/pages": typeof coreAuthLayoutDefaultDevPagesRoute;
  "/(core)/_auth/_layout-settings/$organizationId/invite": typeof coreAuthLayoutSettingsOrganizationIdInviteRoute;
  "/(core)/_auth/_layout-settings/$organizationId/members": typeof coreAuthLayoutSettingsOrganizationIdMembersRoute;
  "/(core)/_auth/_layout-settings/$organizationId/settings": typeof coreAuthLayoutSettingsOrganizationIdSettingsRoute;
  "/_auth/_layout-default/system-observation/_layout/historical": typeof AuthLayoutDefaultSystemObservationLayoutHistoricalRoute;
  "/_auth/_layout-default/tickets/$ticketId/edit": typeof AuthLayoutDefaultTicketsTicketIdEditRoute;
  "/(core)/_admin/_layout-default/admin/": typeof coreAdminLayoutDefaultAdminIndexRoute;
  "/_auth/_layout-default/system-observation/_layout/": typeof AuthLayoutDefaultSystemObservationLayoutIndexRoute;
  "/_auth/_layout-default/tickets/$ticketId/": typeof AuthLayoutDefaultTicketsTicketIdIndexRoute;
  "/(core)/_admin/_layout-default/admin/$userId/user-sessions": typeof coreAdminLayoutDefaultAdminUserIdUserSessionsRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | ""
    | "/forgot-password"
    | "/login"
    | "/logout"
    | "/register"
    | "/reset-password"
    | "/accept-invitation/$invitation"
    | "/create-org"
    | "/test"
    | "/system-observation"
    | "/tickets/new"
    | "/tickets"
    | "/admin/users"
    | "/dev/pages"
    | "/$organizationId/invite"
    | "/$organizationId/members"
    | "/$organizationId/settings"
    | "/system-observation/historical"
    | "/tickets/$ticketId/edit"
    | "/admin"
    | "/system-observation/"
    | "/tickets/$ticketId"
    | "/admin/$userId/user-sessions";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | ""
    | "/forgot-password"
    | "/login"
    | "/logout"
    | "/register"
    | "/reset-password"
    | "/accept-invitation/$invitation"
    | "/create-org"
    | "/test"
    | "/system-observation"
    | "/tickets/new"
    | "/tickets"
    | "/admin/users"
    | "/dev/pages"
    | "/$organizationId/invite"
    | "/$organizationId/members"
    | "/$organizationId/settings"
    | "/system-observation/historical"
    | "/tickets/$ticketId/edit"
    | "/admin"
    | "/tickets/$ticketId"
    | "/admin/$userId/user-sessions";
  id:
    | "__root__"
    | "/(core)"
    | "/(core)/_admin"
    | "/(core)/_auth"
    | "/(core)/forgot-password"
    | "/(core)/login"
    | "/(core)/logout"
    | "/(core)/register"
    | "/(core)/reset-password"
    | "/(core)/_admin/_layout-default"
    | "/(core)/_auth/_layout-default"
    | "/(core)/_auth/_layout-settings"
    | "/(core)/accept-invitation/$invitation"
    | "/(core)/_auth/_layout-default/create-org"
    | "/(core)/_auth/_layout-default/test"
    | "/_auth/_layout-default/system-observation"
    | "/_auth/_layout-default/system-observation/_layout"
    | "/_auth/_layout-default/tickets/new"
    | "/(core)/_auth/_layout-default/"
    | "/_auth/_layout-default/tickets/"
    | "/(core)/_admin/_layout-default/admin/users"
    | "/(core)/_auth/_layout-default/dev/pages"
    | "/(core)/_auth/_layout-settings/$organizationId/invite"
    | "/(core)/_auth/_layout-settings/$organizationId/members"
    | "/(core)/_auth/_layout-settings/$organizationId/settings"
    | "/_auth/_layout-default/system-observation/_layout/historical"
    | "/_auth/_layout-default/tickets/$ticketId/edit"
    | "/(core)/_admin/_layout-default/admin/"
    | "/_auth/_layout-default/system-observation/_layout/"
    | "/_auth/_layout-default/tickets/$ticketId/"
    | "/(core)/_admin/_layout-default/admin/$userId/user-sessions";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  coreRoute: typeof coreRouteWithChildren;
  AuthLayoutDefaultSystemObservationRoute: typeof AuthLayoutDefaultSystemObservationRouteWithChildren;
  AuthLayoutDefaultTicketsNewRoute: typeof AuthLayoutDefaultTicketsNewRoute;
  AuthLayoutDefaultTicketsIndexRoute: typeof AuthLayoutDefaultTicketsIndexRoute;
  AuthLayoutDefaultTicketsTicketIdEditRoute: typeof AuthLayoutDefaultTicketsTicketIdEditRoute;
  AuthLayoutDefaultTicketsTicketIdIndexRoute: typeof AuthLayoutDefaultTicketsTicketIdIndexRoute;
}
const rootRouteChildren: RootRouteChildren = {
  coreRoute: coreRouteWithChildren,
  AuthLayoutDefaultSystemObservationRoute:
    AuthLayoutDefaultSystemObservationRouteWithChildren,
  AuthLayoutDefaultTicketsNewRoute: AuthLayoutDefaultTicketsNewRoute,
  AuthLayoutDefaultTicketsIndexRoute: AuthLayoutDefaultTicketsIndexRoute,
  AuthLayoutDefaultTicketsTicketIdEditRoute:
    AuthLayoutDefaultTicketsTicketIdEditRoute,
  AuthLayoutDefaultTicketsTicketIdIndexRoute:
    AuthLayoutDefaultTicketsTicketIdIndexRoute,
};
export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
